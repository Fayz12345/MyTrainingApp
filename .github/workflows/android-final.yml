name: Android APK (Simple Build)

on:
  workflow_dispatch:
  push:
    branches: [qa]

env:
  AWS_REGION: ca-central-1

jobs:
  build-android-simple:
    name: Build Android APK (Simplified)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: |
          npm ci
          
      - name: Setup Android SDK
        run: |
          # Use built-in Android SDK
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          
          # Accept licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
          
          # Install required components  
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;27.1.12297006"

      - name: Create simple local.properties
        run: |
          cd android
          echo "sdk.dir=$ANDROID_HOME" > local.properties
          echo "ndk.dir=$ANDROID_HOME/ndk/27.1.12297006" >> local.properties

      - name: Disable problematic features
        run: |
          # Disable new architecture to avoid autolinking issues
          cd android
          echo "newArchEnabled=false" >> gradle.properties
          echo "hermesEnabled=false" >> gradle.properties

      - name: Build APK (direct approach)
        run: |
          cd android
          chmod +x gradlew
          
          # Clean and build (use existing Gradle version)
          ./gradlew clean --no-daemon
          ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Verify APK
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "‚úÖ APK created successfully!"
            echo "üìè Size: $APK_SIZE"
            cp "$APK_PATH" "./MyTrainingApp-qa.apk"
          else
            echo "‚ùå APK not found at $APK_PATH"
            echo "üîç Searching for APK files..."
            find android -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-simple
          path: MyTrainingApp-qa.apk
          retention-days: 30

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload APK to S3
        run: |
          BUCKET_NAME="qa-mytrainingapp-artifacts"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          echo "üì§ Uploading APK to S3..."
          
          # Upload APK with timestamp
          aws s3 cp MyTrainingApp-qa.apk s3://$BUCKET_NAME/MyTrainingApp-qa-$TIMESTAMP.apk
          
          # Upload as latest
          aws s3 cp MyTrainingApp-qa.apk s3://$BUCKET_NAME/MyTrainingApp-qa-latest.apk
          
          echo "üéâ APK uploaded successfully!"
          echo "üîó Download: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/MyTrainingApp-qa-latest.apk"

      - name: Summary
        run: |
          echo "üì± Simple Android Build Summary:"
          echo "‚úÖ APK built successfully"
          echo "üîó Download: https://qa-mytrainingapp-artifacts.s3.ca-central-1.amazonaws.com/MyTrainingApp-qa-latest.apk"
          echo "üì± Ready for Android testing!"