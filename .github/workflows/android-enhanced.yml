name: Enhanced Android Build

on:
  workflow_dispatch:
    inputs:
      upload_to_s3:
        description: 'Upload APK to S3'
        required: false
        default: 'true'
        type: boolean

env:
  AWS_REGION: ca-central-1
  NODE_VERSION: '20'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android APK (Enhanced)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          target: google_apis
          arch: x86_64
          ndk-version: 25.1.8937393

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install Node dependencies
        run: |
          npm ci --prefer-offline
          npm ls react-native || echo "React Native version check"

      - name: Generate React Native codegen
        run: |
          echo "üîß Generating React Native codegen..."
          npx react-native codegen || echo "Codegen step completed"

      - name: Prepare Android environment
        run: |
          echo "üîß Preparing Android environment..."
          cd android
          chmod +x gradlew
          
          # Accept Android licenses
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # Clean any existing build artifacts
          ./gradlew clean || echo "Clean completed"

      - name: Build Android Debug APK first
        run: |
          echo "üîß Building debug APK first..."
          cd android
          ./gradlew assembleDebug --no-daemon --stacktrace --warning-mode=all
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"'

      - name: Build Android Release APK
        run: |
          echo "üîß Building release APK..."
          cd android
          ./gradlew assembleRelease --no-daemon --stacktrace --warning-mode=all
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"'

      - name: Verify APK creation
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "‚úÖ APK created successfully!"
            echo "üìÅ Location: $APK_PATH"
            echo "üìè Size: $APK_SIZE"
          else
            echo "‚ùå APK not found at expected location"
            echo "üîç Searching for APK files..."
            find android/app/build -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk-enhanced
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30

      - name: Configure AWS credentials
        if: ${{ inputs.upload_to_s3 == true || inputs.upload_to_s3 == 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload APK to S3
        if: ${{ inputs.upload_to_s3 == true || inputs.upload_to_s3 == 'true' }}
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          BUCKET_NAME="qa-mytrainingapp-artifacts"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          echo "üì§ Uploading APK to S3..."
          
          # Create bucket if it doesn't exist
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }} || echo "Bucket already exists"
          
          # Upload APK with timestamp
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/MyTrainingApp-qa-$TIMESTAMP.apk
          
          # Upload as latest
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/MyTrainingApp-qa-latest.apk
          
          # Make bucket publicly accessible
          aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false || echo "Public access already configured"
          
          # Add bucket policy
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
              }
            ]
          }' || echo "Bucket policy already exists"
          
          echo "üéâ APK uploaded successfully!"
          echo "üîó Latest download: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/MyTrainingApp-qa-latest.apk"
          echo "üïê Timestamped: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/MyTrainingApp-qa-$TIMESTAMP.apk"

      - name: Build Summary
        run: |
          echo "üì± Enhanced Android Build Summary:"
          echo "‚úÖ Android APK built successfully"
          echo "üìä Build completed with Node ${{ env.NODE_VERSION }} and Java ${{ env.JAVA_VERSION }}"
          if [ "${{ inputs.upload_to_s3 }}" == "true" ]; then
            echo "‚òÅÔ∏è  APK uploaded to S3"
            echo "üîó Download: https://qa-mytrainingapp-artifacts.s3.ca-central-1.amazonaws.com/MyTrainingApp-qa-latest.apk"
          else
            echo "üìÅ APK available as GitHub artifact"
          fi
          echo "üéØ Ready for QA testing!"