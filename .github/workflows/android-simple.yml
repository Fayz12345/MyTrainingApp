name: Simple Android Build

on:
  workflow_dispatch: # Manual trigger only

env:
  AWS_REGION: ca-central-1
  NODE_VERSION: '18'  # Same as main workflow

jobs:
  build-android:
    name: Build Android APK (Simple)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Node dependencies
        run: npm ci

      - name: Setup Android SDK (simplified)
        run: |
          # Use sdkmanager that comes with GitHub Actions
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;25.1.8937393"

      - name: Make Gradlew executable
        run: chmod +x android/gradlew

      - name: Build Android Release APK
        run: |
          cd android
          ./gradlew assembleRelease --no-daemon --stacktrace
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx3g"'

      - name: Check APK exists
        run: |
          if [ -f "android/app/build/outputs/apk/release/app-release.apk" ]; then
            echo "‚úÖ APK built successfully!"
            ls -la android/app/build/outputs/apk/release/
          else
            echo "‚ùå APK not found"
            find android/app/build -name "*.apk" -type f || echo "No APK files found"
            exit 1
          fi

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload APK to S3
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          BUCKET_NAME="qa-mytrainingapp-artifacts"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Create bucket if it doesn't exist
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }} || true
          
          # Upload APK
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/MyTrainingApp-qa-latest.apk
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/MyTrainingApp-qa-$TIMESTAMP.apk
          
          # Make bucket publicly accessible
          aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false || true
          
          # Add bucket policy
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
              }
            ]
          }' || true
          
          echo "üéâ Android APK deployed successfully!"
          echo "üì± Download URL: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/MyTrainingApp-qa-latest.apk"

      - name: Summary
        run: |
          echo "üì± Android QA Build Summary:"
          echo "‚úÖ APK built and uploaded to S3"
          echo "üîó Latest: https://qa-mytrainingapp-artifacts.s3.ca-central-1.amazonaws.com/MyTrainingApp-qa-latest.apk"
          echo "üéØ Ready for QA testing!"