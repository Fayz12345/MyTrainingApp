name: Test Android Release APK

on:
  workflow_dispatch:
  push:
    branches: [qa]
    paths:
      - '.github/workflows/android-release-test.yml'

env:
  AWS_REGION: ca-central-1

jobs:
  test-release-build:
    name: Test Release APK Build
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install dependencies
        run: npm ci

      - name: Setup Android SDK
        run: |
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34" "build-tools;34.0.0" "ndk;27.1.12297006"

      - name: Create release keystore (temporary for testing)
        run: |
          cd android/app
          # Create a temporary keystore for testing (NOT for production)
          keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore \
            -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000 \
            -storepass android -keypass android \
            -dname "CN=Test,OU=Test,O=Test,L=Test,S=Test,C=US"

      - name: Configure gradle properties for release
        run: |
          cd android
          echo "MYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore" >> gradle.properties
          echo "MYAPP_UPLOAD_KEY_ALIAS=my-key-alias" >> gradle.properties  
          echo "MYAPP_UPLOAD_STORE_PASSWORD=android" >> gradle.properties
          echo "MYAPP_UPLOAD_KEY_PASSWORD=android" >> gradle.properties
          echo "newArchEnabled=false" >> gradle.properties
          echo "hermesEnabled=false" >> gradle.properties

      - name: Update build.gradle for signing
        run: |
          cd android/app
          echo "🔧 Configuring build.gradle for release signing..."
          
          # Create a backup
          cp build.gradle build.gradle.backup
          
          # Use cat to create signing config (simpler than sed)
          if ! grep -q "signingConfigs" build.gradle; then
            echo "Adding signing configuration..."
            
            # Add signing config after android {
            awk '/android \{/ {
              print $0
              print "    signingConfigs {"
              print "        release {"
              print "            if (project.hasProperty(\"MYAPP_UPLOAD_STORE_FILE\")) {"
              print "                storeFile file(MYAPP_UPLOAD_STORE_FILE)"
              print "                storePassword MYAPP_UPLOAD_STORE_PASSWORD"
              print "                keyAlias MYAPP_UPLOAD_KEY_ALIAS"
              print "                keyPassword MYAPP_UPLOAD_KEY_PASSWORD"
              print "            }"
              print "        }"
              print "    }"
              next
            }
            /release \{/ {
              print $0
              getline
              while ($0 !~ /\}/) {
                if ($0 !~ /signingConfig/) print $0
                getline
              }
              print "            signingConfig signingConfigs.release"
              print $0
              next
            }
            { print }' build.gradle.backup > build.gradle
          fi
          
          echo "✅ Build.gradle updated for signing"

      - name: Build Release APK
        run: |
          cd android
          chmod +x gradlew
          
          # Use Gradle 9.0 (latest, should fix all compatibility issues)
          echo "🔧 Setting Gradle to version 9.0..."
          ./gradlew wrapper --gradle-version 9.0
          
          # Configure memory and performance optimizations
          echo "org.gradle.jvmargs=-Xmx6g -XX:MaxMetaspaceSize=2g -XX:+UseG1GC" >> gradle.properties
          echo "org.gradle.parallel=false" >> gradle.properties
          echo "android.useFullClasspathForDexingTransform=true" >> gradle.properties
          
          # Fix React Native JS bundling issues
          echo "react.bundleInRelease=true" >> gradle.properties
          echo "react.enableHermes=false" >> gradle.properties
          echo "react.bundleCommand=bundle" >> gradle.properties
          
          # Increase timeouts for JS bundling
          echo "org.gradle.daemon.idletimeout=600000" >> gradle.properties
          echo "org.gradle.internal.http.connectionTimeout=600000" >> gradle.properties
          echo "org.gradle.internal.http.socketTimeout=600000" >> gradle.properties
          
          echo "🔧 Building release APK with Gradle 9.0..."
          ./gradlew assembleRelease --no-daemon --stacktrace --max-workers=1 --no-parallel
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx6g -XX:MaxMetaspaceSize=2g -XX:+UseG1GC"'

      - name: Verify Release APK
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "✅ Release APK created successfully!"
            echo "📏 Size: $APK_SIZE"
            
            # Check if it's properly signed
            if command -v aapt &> /dev/null; then
              echo "📋 APK Info:"
              aapt dump badging "$APK_PATH" | head -5
            fi
            
            cp "$APK_PATH" "./MyTrainingApp-release.apk"
          else
            echo "❌ Release APK not found"
            echo "🔍 Available files:"
            find android/app/build -name "*.apk" -type f || echo "No APK files"
            exit 1
          fi

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        with:
          name: android-release-apk-test
          path: MyTrainingApp-release.apk

      - name: Summary
        run: |
          echo "📱 Release APK Test Summary:"
          echo "✅ Successfully built SIGNED release APK"
          echo "⚠️  Uses temporary test keystore (NOT for production)"
          echo "🎯 Next: Create production keystore for real release"