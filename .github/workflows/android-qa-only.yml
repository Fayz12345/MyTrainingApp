name: Android APK Build for QA

on:
  workflow_dispatch: # Manual trigger only
  push:
    branches: [qa]
    paths: 
      - 'android/**'
      - 'src/**'
      - 'package.json'

env:
  AWS_REGION: ca-central-1
  NODE_VERSION: '18'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          
      - name: Install Node dependencies
        run: npm ci

      - name: Install Yarn (React Native prefers Yarn)
        run: npm install -g yarn

      - name: Install dependencies with Yarn
        run: yarn install --frozen-lockfile

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make Gradlew executable
        run: chmod +x android/gradlew

      - name: Clean Android build
        run: |
          cd android
          ./gradlew clean

      - name: Build Android APK (Release)
        run: |
          cd android
          ./gradlew assembleRelease --stacktrace --info
        env:
          GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx4g -XX:+HeapDumpOnOutOfMemoryError"'

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload APK to S3
        run: |
          APK_PATH="android/app/build/outputs/apk/release/app-release.apk"
          BUCKET_NAME="qa-mytrainingapp-artifacts"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          S3_KEY="MyTrainingApp-qa-$TIMESTAMP.apk"
          
          # Create bucket if it doesn't exist
          aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }} || true
          
          # Upload APK with timestamp
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/$S3_KEY
          
          # Upload as latest
          aws s3 cp $APK_PATH s3://$BUCKET_NAME/MyTrainingApp-qa-latest.apk
          
          # Make bucket publicly readable
          aws s3api put-public-access-block --bucket $BUCKET_NAME --public-access-block-configuration BlockPublicAcls=false,IgnorePublicAcls=false,BlockPublicPolicy=false,RestrictPublicBuckets=false || true
          
          # Add bucket policy for public access
          aws s3api put-bucket-policy --bucket $BUCKET_NAME --policy '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": "*",
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$BUCKET_NAME'/*"
              }
            ]
          }' || true
          
          echo "üì± APK uploaded successfully!"
          echo "üîó Download URL: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/MyTrainingApp-qa-latest.apk"
          echo "üïê Timestamped: https://$BUCKET_NAME.s3.${{ env.AWS_REGION }}.amazonaws.com/$S3_KEY"